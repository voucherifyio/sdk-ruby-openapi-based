=begin
#Voucherify API

#Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

The version of the OpenAPI document: v2018-08-01
Contact: support@voucherify.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module VoucherifySdk
  class StackableDiscountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Redeem Stackable Discounts
    # ## How API returns calculated discounts and order amounts in the response  In the table below, you can see the logic the API follows to calculate discounts and amounts:  | **Field** | **Calculation** | **Description** | |:---|:---|:---| | amount | N/A | This field shows the order amount before applying any discount | | total_amount | `total_amount` = `amount` - `total_discount_amount` | This field shows the order amount after applying all the discounts | | discount_amount | `discount_amount` = `previous_discount_amount` + `applied_discount_amount` | This field sums up all order-level discounts up to and including the specific discount being calculated for the stacked redemption. | | items_discount_amount | sum(items, i => i.discount_amount) | This field sums up all product-specific discounts | | total_discount_amount | `total_discount_amount` = `discount_amount` + `items_discount_amount` | This field sums up all order-level and all product-specific discounts | | applied_discount_amount | N/A | This field shows the order-level discount applied in a particular request | | items_applied_discount_amount | sum(items, i => i.applied_discount_amount) | This field sums up all product-specific discounts applied in a particular request | | total_applied_discount_amount | `total_applied_discount_amount` = `applied_discount_amount` + `items_applied_discount_amount` | This field sums up all order-level and all product-specific discounts applied in a particular request |  <!-- theme: info --> > ðŸ“˜ Rollbacks > > You can't roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your <!-- [rollback request](OpenAPI.json/paths/~1redemptions~1{parentRedemptionId}~1rollbacks/post) -->[rollback request](ref:rollback-stacked-redemptions).      <!-- theme: info --> > ðŸ“˜ Also available on client-side > > This method is also accessible through public keys which you can use in client-sideâ€‹ apps: mobile and web browser apps. Go to the dedicated [endpoint](ref:redeem-stacked-discounts-client-side) to learn more. > - Use `X-Client-Application-Id` as the application ID header. > - Use `X-Client-Token` as the appliction secret key header. > - Use client-side base URL. > - Use an `origin` header for your custom domain.
    # @param [Hash] opts the optional parameters
    # @option opts [RedemptionsRedeemRequestBody] :redemptions_redeem_request_body 
    # @return [RedemptionsRedeemResponseBody]
    def redeem_stacked_discounts(opts = {})
      data, _status_code, _headers = redeem_stacked_discounts_with_http_info(opts)
      data
    end

    # Redeem Stackable Discounts
    # ## How API returns calculated discounts and order amounts in the response  In the table below, you can see the logic the API follows to calculate discounts and amounts:  | **Field** | **Calculation** | **Description** | |:---|:---|:---| | amount | N/A | This field shows the order amount before applying any discount | | total_amount | &#x60;total_amount&#x60; &#x3D; &#x60;amount&#x60; - &#x60;total_discount_amount&#x60; | This field shows the order amount after applying all the discounts | | discount_amount | &#x60;discount_amount&#x60; &#x3D; &#x60;previous_discount_amount&#x60; + &#x60;applied_discount_amount&#x60; | This field sums up all order-level discounts up to and including the specific discount being calculated for the stacked redemption. | | items_discount_amount | sum(items, i &#x3D;&gt; i.discount_amount) | This field sums up all product-specific discounts | | total_discount_amount | &#x60;total_discount_amount&#x60; &#x3D; &#x60;discount_amount&#x60; + &#x60;items_discount_amount&#x60; | This field sums up all order-level and all product-specific discounts | | applied_discount_amount | N/A | This field shows the order-level discount applied in a particular request | | items_applied_discount_amount | sum(items, i &#x3D;&gt; i.applied_discount_amount) | This field sums up all product-specific discounts applied in a particular request | | total_applied_discount_amount | &#x60;total_applied_discount_amount&#x60; &#x3D; &#x60;applied_discount_amount&#x60; + &#x60;items_applied_discount_amount&#x60; | This field sums up all order-level and all product-specific discounts applied in a particular request |  &lt;!-- theme: info --&gt; &gt; ðŸ“˜ Rollbacks &gt; &gt; You can&#39;t roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your &lt;!-- [rollback request](OpenAPI.json/paths/~1redemptions~1{parentRedemptionId}~1rollbacks/post) --&gt;[rollback request](ref:rollback-stacked-redemptions).      &lt;!-- theme: info --&gt; &gt; ðŸ“˜ Also available on client-side &gt; &gt; This method is also accessible through public keys which you can use in client-sideâ€‹ apps: mobile and web browser apps. Go to the dedicated [endpoint](ref:redeem-stacked-discounts-client-side) to learn more. &gt; - Use &#x60;X-Client-Application-Id&#x60; as the application ID header. &gt; - Use &#x60;X-Client-Token&#x60; as the appliction secret key header. &gt; - Use client-side base URL. &gt; - Use an &#x60;origin&#x60; header for your custom domain.
    # @param [Hash] opts the optional parameters
    # @option opts [RedemptionsRedeemRequestBody] :redemptions_redeem_request_body 
    # @return [Array<(RedemptionsRedeemResponseBody, Integer, Hash)>] RedemptionsRedeemResponseBody data, response status code and response headers
    def redeem_stacked_discounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StackableDiscountsApi.redeem_stacked_discounts ...'
      end
      # resource path
      local_var_path = '/v1/redemptions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'redemptions_redeem_request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'RedemptionsRedeemResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-App-Id-1', 'X-App-Token-1']

      new_options = opts.merge(
        :operation => :"StackableDiscountsApi.redeem_stacked_discounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StackableDiscountsApi#redeem_stacked_discounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Redeem Stackable Discounts (client-side)
    # This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.  ## How API returns calculated discounts and order amounts in the response  In the table below, you can see the logic the API follows to calculate discounts and amounts:  | **Field** | **Calculation** | **Description** | |:---|:---|:---| | amount | N/A | This field shows the order amount before applying any discount | | total_amount | `total_amount` = `amount` - `total_discount_amount` | This field shows the order amount after applying all the discounts | | discount_amount | `discount_amount` = `previous_discount_amount` + `applied_discount_amount` | This field sums up all order-level discounts up to and including the specific discount being calculated for the stacked redemption. | | items_discount_amount | sum(items, i => i.discount_amount) | This field sums up all product-specific discounts | | total_discount_amount | `total_discount_amount` = `discount_amount` + `items_discount_amount` | This field sums up all order-level and all product-specific discounts | | applied_discount_amount | N/A | This field shows the order-level discount applied in a particular request | | items_applied_discount_amount | sum(items, i => i.applied_discount_amount) | This field sums up all product-specific discounts applied in a particular request | | total_applied_discount_amount | `total_applied_discount_amount` = `applied_discount_amount` + `items_applied_discount_amount` | This field sums up all order-level and all product-specific discounts applied in a particular request |  <!-- theme: info --> > ðŸ“˜ Rollbacks > > You can't roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your <!-- [rollback request](OpenAPI.json/paths/~1redemptions~1{parentRedemptionId}~1rollbacks/post) -->[rollback request](ref:rollback-stacked-redemptions).
    # @param origin [String] Indicates the origin (scheme, hostname, and port).
    # @param [Hash] opts the optional parameters
    # @option opts [ClientRedemptionsRedeemRequestBody] :client_redemptions_redeem_request_body 
    # @return [ClientRedemptionsRedeemResponseBody]
    def redeem_stacked_discounts_client_side(origin, opts = {})
      data, _status_code, _headers = redeem_stacked_discounts_client_side_with_http_info(origin, opts)
      data
    end

    # Redeem Stackable Discounts (client-side)
    # This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.  ## How API returns calculated discounts and order amounts in the response  In the table below, you can see the logic the API follows to calculate discounts and amounts:  | **Field** | **Calculation** | **Description** | |:---|:---|:---| | amount | N/A | This field shows the order amount before applying any discount | | total_amount | &#x60;total_amount&#x60; &#x3D; &#x60;amount&#x60; - &#x60;total_discount_amount&#x60; | This field shows the order amount after applying all the discounts | | discount_amount | &#x60;discount_amount&#x60; &#x3D; &#x60;previous_discount_amount&#x60; + &#x60;applied_discount_amount&#x60; | This field sums up all order-level discounts up to and including the specific discount being calculated for the stacked redemption. | | items_discount_amount | sum(items, i &#x3D;&gt; i.discount_amount) | This field sums up all product-specific discounts | | total_discount_amount | &#x60;total_discount_amount&#x60; &#x3D; &#x60;discount_amount&#x60; + &#x60;items_discount_amount&#x60; | This field sums up all order-level and all product-specific discounts | | applied_discount_amount | N/A | This field shows the order-level discount applied in a particular request | | items_applied_discount_amount | sum(items, i &#x3D;&gt; i.applied_discount_amount) | This field sums up all product-specific discounts applied in a particular request | | total_applied_discount_amount | &#x60;total_applied_discount_amount&#x60; &#x3D; &#x60;applied_discount_amount&#x60; + &#x60;items_applied_discount_amount&#x60; | This field sums up all order-level and all product-specific discounts applied in a particular request |  &lt;!-- theme: info --&gt; &gt; ðŸ“˜ Rollbacks &gt; &gt; You can&#39;t roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your &lt;!-- [rollback request](OpenAPI.json/paths/~1redemptions~1{parentRedemptionId}~1rollbacks/post) --&gt;[rollback request](ref:rollback-stacked-redemptions).
    # @param origin [String] Indicates the origin (scheme, hostname, and port).
    # @param [Hash] opts the optional parameters
    # @option opts [ClientRedemptionsRedeemRequestBody] :client_redemptions_redeem_request_body 
    # @return [Array<(ClientRedemptionsRedeemResponseBody, Integer, Hash)>] ClientRedemptionsRedeemResponseBody data, response status code and response headers
    def redeem_stacked_discounts_client_side_with_http_info(origin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StackableDiscountsApi.redeem_stacked_discounts_client_side ...'
      end
      # verify the required parameter 'origin' is set
      if @api_client.config.client_side_validation && origin.nil?
        fail ArgumentError, "Missing the required parameter 'origin' when calling StackableDiscountsApi.redeem_stacked_discounts_client_side"
      end
      # resource path
      local_var_path = '/client/v1/redemptions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'origin'] = origin

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'client_redemptions_redeem_request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ClientRedemptionsRedeemResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-Client-Application-Id-1', 'X-Client-Token-1']

      new_options = opts.merge(
        :operation => :"StackableDiscountsApi.redeem_stacked_discounts_client_side",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StackableDiscountsApi#redeem_stacked_discounts_client_side\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rollback Stackable Redemptions
    # Rollback a stackable redemption. When you rollback a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter.
    # @param parent_redemption_id [String] Unique identifier of a parent redemption, e.g. &#x60;r_JQfm73zWSJFQxs3bGxweYjgm&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason Reason for the rollback.
    # @option opts [String] :tracking_id Customer&#39;s &#x60;source_id&#x60;.
    # @option opts [RedemptionsRollbacksCreateRequestBody] :redemptions_rollbacks_create_request_body Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body.
    # @return [RedemptionsRollbacksCreateResponseBody]
    def rollback_stacked_redemptions(parent_redemption_id, opts = {})
      data, _status_code, _headers = rollback_stacked_redemptions_with_http_info(parent_redemption_id, opts)
      data
    end

    # Rollback Stackable Redemptions
    # Rollback a stackable redemption. When you rollback a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter.
    # @param parent_redemption_id [String] Unique identifier of a parent redemption, e.g. &#x60;r_JQfm73zWSJFQxs3bGxweYjgm&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason Reason for the rollback.
    # @option opts [String] :tracking_id Customer&#39;s &#x60;source_id&#x60;.
    # @option opts [RedemptionsRollbacksCreateRequestBody] :redemptions_rollbacks_create_request_body Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body.
    # @return [Array<(RedemptionsRollbacksCreateResponseBody, Integer, Hash)>] RedemptionsRollbacksCreateResponseBody data, response status code and response headers
    def rollback_stacked_redemptions_with_http_info(parent_redemption_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StackableDiscountsApi.rollback_stacked_redemptions ...'
      end
      # verify the required parameter 'parent_redemption_id' is set
      if @api_client.config.client_side_validation && parent_redemption_id.nil?
        fail ArgumentError, "Missing the required parameter 'parent_redemption_id' when calling StackableDiscountsApi.rollback_stacked_redemptions"
      end
      # resource path
      local_var_path = '/v1/redemptions/{parentRedemptionId}/rollbacks'.sub('{' + 'parentRedemptionId' + '}', CGI.escape(parent_redemption_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'reason'] = opts[:'reason'] if !opts[:'reason'].nil?
      query_params[:'tracking_id'] = opts[:'tracking_id'] if !opts[:'tracking_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'redemptions_rollbacks_create_request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'RedemptionsRollbacksCreateResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-App-Id-1', 'X-App-Token-1']

      new_options = opts.merge(
        :operation => :"StackableDiscountsApi.rollback_stacked_redemptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StackableDiscountsApi#rollback_stacked_redemptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate Stackable Discounts
    # Verify redeemables provided in the request. This method is designed for server side integration which means that it is accessible only through private keys.
    # @param [Hash] opts the optional parameters
    # @option opts [ValidationsValidateRequestBody] :validations_validate_request_body 
    # @return [ValidationsValidateResponseBody]
    def validate_stacked_discounts(opts = {})
      data, _status_code, _headers = validate_stacked_discounts_with_http_info(opts)
      data
    end

    # Validate Stackable Discounts
    # Verify redeemables provided in the request. This method is designed for server side integration which means that it is accessible only through private keys.
    # @param [Hash] opts the optional parameters
    # @option opts [ValidationsValidateRequestBody] :validations_validate_request_body 
    # @return [Array<(ValidationsValidateResponseBody, Integer, Hash)>] ValidationsValidateResponseBody data, response status code and response headers
    def validate_stacked_discounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StackableDiscountsApi.validate_stacked_discounts ...'
      end
      # resource path
      local_var_path = '/v1/validations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'validations_validate_request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ValidationsValidateResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-App-Id-1', 'X-App-Token-1']

      new_options = opts.merge(
        :operation => :"StackableDiscountsApi.validate_stacked_discounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StackableDiscountsApi#validate_stacked_discounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate Stackable Discounts (client-side)
    # Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.
    # @param origin [String] Indicates the origin (scheme, hostname, and port).
    # @param [Hash] opts the optional parameters
    # @option opts [ClientValidationsValidateRequestBody] :client_validations_validate_request_body 
    # @return [ClientValidationsValidateResponseBody]
    def validate_stacked_discounts_client_side(origin, opts = {})
      data, _status_code, _headers = validate_stacked_discounts_client_side_with_http_info(origin, opts)
      data
    end

    # Validate Stackable Discounts (client-side)
    # Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.
    # @param origin [String] Indicates the origin (scheme, hostname, and port).
    # @param [Hash] opts the optional parameters
    # @option opts [ClientValidationsValidateRequestBody] :client_validations_validate_request_body 
    # @return [Array<(ClientValidationsValidateResponseBody, Integer, Hash)>] ClientValidationsValidateResponseBody data, response status code and response headers
    def validate_stacked_discounts_client_side_with_http_info(origin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StackableDiscountsApi.validate_stacked_discounts_client_side ...'
      end
      # verify the required parameter 'origin' is set
      if @api_client.config.client_side_validation && origin.nil?
        fail ArgumentError, "Missing the required parameter 'origin' when calling StackableDiscountsApi.validate_stacked_discounts_client_side"
      end
      # resource path
      local_var_path = '/client/v1/validations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'origin'] = origin

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'client_validations_validate_request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ClientValidationsValidateResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['X-Client-Application-Id-1', 'X-Client-Token-1']

      new_options = opts.merge(
        :operation => :"StackableDiscountsApi.validate_stacked_discounts_client_side",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StackableDiscountsApi#validate_stacked_discounts_client_side\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
