=begin
#Voucherify API

#Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

The version of the OpenAPI document: v2018-08-01
Contact: support@voucherify.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module VoucherifySdk
  class ExportCustomerFilters
    attr_accessor :junction

    attr_accessor :name

    attr_accessor :id

    attr_accessor :description

    attr_accessor :email

    attr_accessor :source_id

    attr_accessor :created_at

    attr_accessor :address_city

    attr_accessor :address_state

    attr_accessor :address_line_1

    attr_accessor :address_line_2

    attr_accessor :address_country

    attr_accessor :address_postal_code

    attr_accessor :redemptions_total_redeemed

    attr_accessor :redemptions_total_failed

    attr_accessor :redemptions_total_succeeded

    attr_accessor :redemptions_total_rolled_back

    attr_accessor :redemptions_total_rollback_failed

    attr_accessor :redemptions_total_rollback_succeeded

    attr_accessor :orders_total_amount

    attr_accessor :orders_total_count

    attr_accessor :orders_average_amount

    attr_accessor :orders_last_order_amount

    attr_accessor :orders_last_order_date

    attr_accessor :loyalty_points

    attr_accessor :loyalty_referred_customers

    attr_accessor :updated_at

    attr_accessor :phone

    attr_accessor :birthday

    attr_accessor :metadata

    attr_accessor :birthdate

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'junction' => :'junction',
        :'name' => :'name',
        :'id' => :'id',
        :'description' => :'description',
        :'email' => :'email',
        :'source_id' => :'source_id',
        :'created_at' => :'created_at',
        :'address_city' => :'address_city',
        :'address_state' => :'address_state',
        :'address_line_1' => :'address_line_1',
        :'address_line_2' => :'address_line_2',
        :'address_country' => :'address_country',
        :'address_postal_code' => :'address_postal_code',
        :'redemptions_total_redeemed' => :'redemptions_total_redeemed',
        :'redemptions_total_failed' => :'redemptions_total_failed',
        :'redemptions_total_succeeded' => :'redemptions_total_succeeded',
        :'redemptions_total_rolled_back' => :'redemptions_total_rolled_back',
        :'redemptions_total_rollback_failed' => :'redemptions_total_rollback_failed',
        :'redemptions_total_rollback_succeeded' => :'redemptions_total_rollback_succeeded',
        :'orders_total_amount' => :'orders_total_amount',
        :'orders_total_count' => :'orders_total_count',
        :'orders_average_amount' => :'orders_average_amount',
        :'orders_last_order_amount' => :'orders_last_order_amount',
        :'orders_last_order_date' => :'orders_last_order_date',
        :'loyalty_points' => :'loyalty_points',
        :'loyalty_referred_customers' => :'loyalty_referred_customers',
        :'updated_at' => :'updated_at',
        :'phone' => :'phone',
        :'birthday' => :'birthday',
        :'metadata' => :'metadata',
        :'birthdate' => :'birthdate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'junction' => :'Junction',
        :'name' => :'FieldConditions',
        :'id' => :'FieldConditions',
        :'description' => :'FieldConditions',
        :'email' => :'FieldConditions',
        :'source_id' => :'FieldConditions',
        :'created_at' => :'FieldConditions',
        :'address_city' => :'FieldConditions',
        :'address_state' => :'FieldConditions',
        :'address_line_1' => :'FieldConditions',
        :'address_line_2' => :'FieldConditions',
        :'address_country' => :'FieldConditions',
        :'address_postal_code' => :'FieldConditions',
        :'redemptions_total_redeemed' => :'FieldConditions',
        :'redemptions_total_failed' => :'FieldConditions',
        :'redemptions_total_succeeded' => :'FieldConditions',
        :'redemptions_total_rolled_back' => :'FieldConditions',
        :'redemptions_total_rollback_failed' => :'FieldConditions',
        :'redemptions_total_rollback_succeeded' => :'FieldConditions',
        :'orders_total_amount' => :'FieldConditions',
        :'orders_total_count' => :'FieldConditions',
        :'orders_average_amount' => :'FieldConditions',
        :'orders_last_order_amount' => :'FieldConditions',
        :'orders_last_order_date' => :'FieldConditions',
        :'loyalty_points' => :'FieldConditions',
        :'loyalty_referred_customers' => :'FieldConditions',
        :'updated_at' => :'FieldConditions',
        :'phone' => :'FieldConditions',
        :'birthday' => :'FieldConditions',
        :'metadata' => :'FieldConditions',
        :'birthdate' => :'FieldConditions'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `VoucherifySdk::ExportCustomerFilters` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `VoucherifySdk::ExportCustomerFilters`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'junction')
        self.junction = attributes[:'junction']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'source_id')
        self.source_id = attributes[:'source_id']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'address_city')
        self.address_city = attributes[:'address_city']
      end

      if attributes.key?(:'address_state')
        self.address_state = attributes[:'address_state']
      end

      if attributes.key?(:'address_line_1')
        self.address_line_1 = attributes[:'address_line_1']
      end

      if attributes.key?(:'address_line_2')
        self.address_line_2 = attributes[:'address_line_2']
      end

      if attributes.key?(:'address_country')
        self.address_country = attributes[:'address_country']
      end

      if attributes.key?(:'address_postal_code')
        self.address_postal_code = attributes[:'address_postal_code']
      end

      if attributes.key?(:'redemptions_total_redeemed')
        self.redemptions_total_redeemed = attributes[:'redemptions_total_redeemed']
      end

      if attributes.key?(:'redemptions_total_failed')
        self.redemptions_total_failed = attributes[:'redemptions_total_failed']
      end

      if attributes.key?(:'redemptions_total_succeeded')
        self.redemptions_total_succeeded = attributes[:'redemptions_total_succeeded']
      end

      if attributes.key?(:'redemptions_total_rolled_back')
        self.redemptions_total_rolled_back = attributes[:'redemptions_total_rolled_back']
      end

      if attributes.key?(:'redemptions_total_rollback_failed')
        self.redemptions_total_rollback_failed = attributes[:'redemptions_total_rollback_failed']
      end

      if attributes.key?(:'redemptions_total_rollback_succeeded')
        self.redemptions_total_rollback_succeeded = attributes[:'redemptions_total_rollback_succeeded']
      end

      if attributes.key?(:'orders_total_amount')
        self.orders_total_amount = attributes[:'orders_total_amount']
      end

      if attributes.key?(:'orders_total_count')
        self.orders_total_count = attributes[:'orders_total_count']
      end

      if attributes.key?(:'orders_average_amount')
        self.orders_average_amount = attributes[:'orders_average_amount']
      end

      if attributes.key?(:'orders_last_order_amount')
        self.orders_last_order_amount = attributes[:'orders_last_order_amount']
      end

      if attributes.key?(:'orders_last_order_date')
        self.orders_last_order_date = attributes[:'orders_last_order_date']
      end

      if attributes.key?(:'loyalty_points')
        self.loyalty_points = attributes[:'loyalty_points']
      end

      if attributes.key?(:'loyalty_referred_customers')
        self.loyalty_referred_customers = attributes[:'loyalty_referred_customers']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'birthday')
        self.birthday = attributes[:'birthday']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'birthdate')
        self.birthdate = attributes[:'birthdate']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          junction == o.junction &&
          name == o.name &&
          id == o.id &&
          description == o.description &&
          email == o.email &&
          source_id == o.source_id &&
          created_at == o.created_at &&
          address_city == o.address_city &&
          address_state == o.address_state &&
          address_line_1 == o.address_line_1 &&
          address_line_2 == o.address_line_2 &&
          address_country == o.address_country &&
          address_postal_code == o.address_postal_code &&
          redemptions_total_redeemed == o.redemptions_total_redeemed &&
          redemptions_total_failed == o.redemptions_total_failed &&
          redemptions_total_succeeded == o.redemptions_total_succeeded &&
          redemptions_total_rolled_back == o.redemptions_total_rolled_back &&
          redemptions_total_rollback_failed == o.redemptions_total_rollback_failed &&
          redemptions_total_rollback_succeeded == o.redemptions_total_rollback_succeeded &&
          orders_total_amount == o.orders_total_amount &&
          orders_total_count == o.orders_total_count &&
          orders_average_amount == o.orders_average_amount &&
          orders_last_order_amount == o.orders_last_order_amount &&
          orders_last_order_date == o.orders_last_order_date &&
          loyalty_points == o.loyalty_points &&
          loyalty_referred_customers == o.loyalty_referred_customers &&
          updated_at == o.updated_at &&
          phone == o.phone &&
          birthday == o.birthday &&
          metadata == o.metadata &&
          birthdate == o.birthdate
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [junction, name, id, description, email, source_id, created_at, address_city, address_state, address_line_1, address_line_2, address_country, address_postal_code, redemptions_total_redeemed, redemptions_total_failed, redemptions_total_succeeded, redemptions_total_rolled_back, redemptions_total_rollback_failed, redemptions_total_rollback_succeeded, orders_total_amount, orders_total_count, orders_average_amount, orders_last_order_amount, orders_last_order_date, loyalty_points, loyalty_referred_customers, updated_at, phone, birthday, metadata, birthdate].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = VoucherifySdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
